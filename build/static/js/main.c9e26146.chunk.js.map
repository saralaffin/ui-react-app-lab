{"version":3,"sources":["Park.js","App.js","serviceWorker.js","index.js"],"names":["Park","className","src","this","props","imgURL","alt","name","description","Component","App","fetchParks","fetch","then","res","json","obj","setState","parksObj","data","names","map","park","handleParkClick","eve","parkObj","state","target","tabIndex","images","url","menuClicked","handleMenuClick","populateMenu","i","key","onClick","imgUrl","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RAeeA,G,6LAVX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,KAAKC,MAAMC,OAAQC,IAAI,KACjC,wBAAIL,UAAU,eAAeE,KAAKC,MAAMG,MACxC,uBAAGN,UAAU,sBAAsBE,KAAKC,MAAMI,kB,GANnCC,cCsFJC,E,YApFb,aAAe,IAAD,8BACZ,+CAUFC,WAAa,WACXC,MACE,sHAECC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZC,SAAUF,EAAIG,OAGhB,IAAIC,EAAQJ,EAAIG,KAAKE,KAAI,SAAAC,GAAI,OAAIA,EAAKf,QACtC,EAAKU,SAAS,CACZG,cAvBM,EA2BdG,gBAAkB,SAAAC,GAChB,IAAIC,EAAU,EAAKC,MAAMR,SAASM,EAAIG,OAAOC,UAC7C,EAAKX,SAAS,CACZV,KAAMkB,EAAQlB,KACdC,YAAaiB,EAAQjB,YACrBH,OAAQoB,EAAQI,OAAO,GAAGC,IAC1BC,aAAc,EAAKL,MAAMK,eAjCf,EAoCdC,gBAAkB,WAChB,EAAKf,SAAS,CAAEc,aAAc,EAAKL,MAAMK,eArC7B,EAuCdE,aAAe,WACb,OAAI,EAAKP,MAAMK,YACN,EAAKL,MAAMN,MAAMC,KAAI,SAACd,EAAM2B,GACjC,OACE,yBACEjC,UAAU,YACVkC,IAAK5B,EACLqB,SAAUM,EACVE,QAAS,EAAKb,iBAEbhB,MAKA,MApDT,EAAKmB,MAAQ,CACXR,SAAU,GACVE,MAAO,GACPb,KAAM,0CACN8B,OAAQ,GACR7B,YAAa,GACbuB,aAAa,GARH,E,iFA0DoB,IAA5B5B,KAAKuB,MAAMN,MAAMkB,QACnBnC,KAAKQ,e,+BAIP,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBACA,8BACE,6BACE,4BAAQmC,QAASjC,KAAK6B,iBAAtB,QACA,4BAAK7B,KAAK8B,iBAEZ,yBAAKhC,UAAU,WACb,kBAAC,EAAD,CACEM,KAAMJ,KAAKuB,MAAMnB,KACjBC,YAAaL,KAAKuB,MAAMlB,YACxBH,OAAQF,KAAKuB,MAAMrB,gB,GA5EfkC,IAAM9B,WCQJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9e26146.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Park.css\";\n\nclass Park extends Component {\n  render() {\n    return (\n      <div className=\"Park\">\n        <img src={this.props.imgURL} alt=\"\" />\n        <h3 className=\"active-park\">{this.props.name}</h3>\n        <p className=\"active-description\">{this.props.description}</p>\n      </div>\n    );\n  }\n}\n\nexport default Park;\n","import React from \"react\";\nimport \"./App.css\";\nimport Park from \"./Park\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      parksObj: {},\n      names: [],\n      name: \"Explore the national parks in Michigan!\",\n      imgUrl: \"\",\n      description: \"\",\n      menuClicked: false\n    };\n  }\n  fetchParks = () => {\n    fetch(\n      \"https://developer.nps.gov/api/v1/parks?stateCode=MI&fields=images&api_key=KDAvx939Yj9FsDsKrBSHeZi7BMzZHUqpQdLU5tfV\"\n    )\n      .then(res => res.json())\n      .then(obj => {\n        this.setState({\n          parksObj: obj.data\n        });\n        //get all names from data object\n        let names = obj.data.map(park => park.name);\n        this.setState({\n          names\n        });\n      });\n  };\n  handleParkClick = eve => {\n    let parkObj = this.state.parksObj[eve.target.tabIndex];\n    this.setState({\n      name: parkObj.name,\n      description: parkObj.description,\n      imgURL: parkObj.images[0].url,\n      menuClicked: !this.state.menuClicked\n    });\n  };\n  handleMenuClick = () => {\n    this.setState({ menuClicked: !this.state.menuClicked });\n  };\n  populateMenu = () => {\n    if (this.state.menuClicked) {\n      return this.state.names.map((name, i) => {\n        return (\n          <div\n            className=\"menu-item\"\n            key={name}\n            tabIndex={i}\n            onClick={this.handleParkClick}\n          >\n            {name}\n          </div>\n        );\n      });\n    } else {\n      return null;\n    }\n  };\n  componentDidMount() {\n    if (this.state.names.length === 0) {\n      this.fetchParks();\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">Hamburger menu</header>\n        <main>\n          <nav>\n            <button onClick={this.handleMenuClick}>Menu</button>\n            <ul>{this.populateMenu()}</ul>\n          </nav>\n          <div className=\"display\">\n            <Park\n              name={this.state.name}\n              description={this.state.description}\n              imgURL={this.state.imgURL}\n            />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}